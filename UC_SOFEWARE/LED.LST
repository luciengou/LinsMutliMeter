C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN LED.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LED.C OMF2 BROWSE DEBUG LISTINCLUDE SYMBOLS

line level    source

   1          #include <MG82FE564.H>
   1      =1  // (System)
   2      =1  sfr ACC       = 0xE0;
   3      =1  sfr B         = 0xF0;
   4      =1  sfr SP        = 0x81;
   5      =1  sfr DPL       = 0x82;
   6      =1  sfr DPH       = 0x83;
   7      =1  sfr PSW       = 0xD0;
   8      =1  
   9      =1  // (Interrupt)
  10      =1  sfr IE        = 0xA8;
  11      =1  sfr EIE1      = 0xAD;
  12      =1  sfr AUXIE     = 0xAD;
  13      =1  sfr XICON     = 0xC0;
  14      =1  sfr IP0L      = 0xB8;
  15      =1  sfr IP        = 0xB8;
  16      =1  sfr IP0H      = 0xB7;
  17      =1  sfr IPH       = 0xB7;
  18      =1  sfr EIP1L     = 0xAE;
  19      =1  sfr AUXIP     = 0xAE;
  20      =1  sfr EIP1H     = 0xAF;
  21      =1  sfr AUXIPH    = 0xAF;
  22      =1  
  23      =1  // (I/O Port)
  24      =1  sfr P0        = 0x80;
  25      =1  sfr P1        = 0x90;
  26      =1  sfr P2        = 0xA0;
  27      =1  sfr P3        = 0xB0;
  28      =1  sfr P4        = 0xE8;
  29      =1  sfr P5        = 0xF8;
  30      =1  sfr P6        = 0xC8;                            // Page F
  31      =1  sfr P0M0      = 0x93;
  32      =1  sfr P0M1      = 0x94;
  33      =1  sfr P1M0      = 0x91;
  34      =1  sfr P1M1      = 0x92;
  35      =1  sfr P2M0      = 0x95;
  36      =1  sfr P2M1      = 0x96;
  37      =1  sfr P3M0      = 0xB1;
  38      =1  sfr P3M1      = 0xB2;
  39      =1  sfr P4M0      = 0xB3;
  40      =1  sfr P4M1      = 0xB4;
  41      =1  sfr P5M0      = 0xB5;
  42      =1  sfr P5M1      = 0xB6;
  43      =1  
  44      =1  // (Timer)
  45      =1  sfr TCON      = 0x88;
  46      =1  sfr TMOD      = 0x89;
  47      =1  sfr T2CON     = 0xC8;
  48      =1  sfr T2MOD     = 0xC9;
  49      =1  sfr RCAP2L    = 0xCA;
  50      =1  sfr RCAP2H    = 0xCB;
  51      =1  sfr TL0       = 0x8A;
  52      =1  sfr TL1       = 0x8B;
  53      =1  sfr TH0       = 0x8C;
  54      =1  sfr TH1       = 0x8D;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 2   

  55      =1  sfr TL2       = 0xCC;
  56      =1  sfr TH2       = 0xCD;
  57      =1  
  58      =1  // (Serial Port)
  59      =1  sfr SCON      = 0x98;
  60      =1  sfr SCON0     = 0x98;
  61      =1  sfr SCON1     = 0x98;                            // Page 1
  62      =1  sfr SBUF      = 0x99;
  63      =1  sfr SBUF0     = 0x99;
  64      =1  sfr SBUF1     = 0x99;                            // Page 1
  65      =1  sfr SADDR     = 0xA9;
  66      =1  sfr SADEN     = 0xB9;
  67      =1  sfr SCFG      = 0x9A;
  68      =1  sfr S1BRT     = 0x9A;
  69      =1  sfr S2BUF     = 0x9A;                            // Page 1
  70      =1  
  71      =1  // (ADC)
  72      =1  sfr ADCON     = 0xC5;
  73      =1  sfr ADCTL     = 0xC5;
  74      =1  sfr ADCV      = 0xC6;
  75      =1  sfr ADCH      = 0xC6;
  76      =1  sfr ADCVL     = 0xBE;
  77      =1  sfr ADCL      = 0xBE;
  78      =1  
  79      =1  // (Keypad Interrupt)
  80      =1  sfr KBCON     = 0xD6;
  81      =1  sfr KBPATN    = 0xD5;
  82      =1  sfr KBMASK    = 0xD7;
  83      =1  
  84      =1  // (SPI)
  85      =1  sfr SPSTAT    = 0x84;
  86      =1  sfr SPCON     = 0x85;
  87      =1  sfr SPDAT     = 0x86;
  88      =1  sfr SPISTAT   = 0x84;
  89      =1  sfr SPICON    = 0x85;
  90      =1  sfr SPIDAT    = 0x86;
  91      =1  sfr SPCTL     = 0x85;
  92      =1  sfr SPICTL    = 0x85;
  93      =1  
  94      =1  // (PCA)
  95      =1  sfr CCON      = 0xD8;
  96      =1  sfr CMOD      = 0xD9;
  97      =1  sfr CL        = 0xE9;
  98      =1  sfr CH        = 0xF9;
  99      =1  sfr CCAPM0    = 0xDA;
 100      =1  sfr CCAPM1    = 0xDB;
 101      =1  sfr CCAPM2    = 0xDC;
 102      =1  sfr CCAPM3    = 0xDD;
 103      =1  sfr CCAPM4    = 0xDE;
 104      =1  sfr CCAPM5    = 0xDF;
 105      =1  sfr CCAP0H    = 0xFA;
 106      =1  sfr CCAP0L    = 0xEA;
 107      =1  sfr CCAP1H    = 0xFB;
 108      =1  sfr CCAP1L    = 0xEB;
 109      =1  sfr CCAP2H    = 0xFC;
 110      =1  sfr CCAP2L    = 0xEC;
 111      =1  sfr CCAP3H    = 0xFD;
 112      =1  sfr CCAP3L    = 0xED;
 113      =1  sfr CCAP4H    = 0xFE;
 114      =1  sfr CCAP4L    = 0xEE;
 115      =1  sfr CCAP5H    = 0xFF;
 116      =1  sfr CCAP5L    = 0xEF;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 3   

 117      =1  sfr PCAPWM0   = 0xF2;
 118      =1  sfr PCAPWM1   = 0xF3;
 119      =1  sfr PCAPWM2   = 0xF4;
 120      =1  sfr PCAPWM3   = 0xF5;
 121      =1  sfr PCAPWM4   = 0xF6;
 122      =1  sfr PCAPWM5   = 0xF7;
 123      =1  
 124      =1  // (Others)
 125      =1  sfr PCON      = 0x87;
 126      =1  sfr PCON0     = 0x87;
 127      =1  sfr PCON1     = 0x97;
 128      =1  sfr EVRCR     = 0x97;
 129      =1  sfr PCON2     = 0xC7;
 130      =1  sfr AUXR      = 0x8E;
 131      =1  sfr AUXR0     = 0x8E;
 132      =1  sfr AUXR1     = 0xA2;
 133      =1  sfr AUXR2     = 0xA6;
 134      =1  sfr STRETCH   = 0x8F;
 135      =1  sfr WDTCR     = 0xE1;
 136      =1  sfr TSTWD     = 0x97;
 137      =1  sfr SFRPI     = 0xAC;
 138      =1  
 139      =1  // (ISP)
 140      =1  sfr ISPCR     = 0xE7;
 141      =1  sfr IFMT      = 0xE5;
 142      =1  sfr IFD       = 0xE2;
 143      =1  sfr IFADRH    = 0xE3;
 144      =1  sfr IFADRL    = 0xE4;
 145      =1  sfr SCMD      = 0xE6;
 146      =1  
 147      =1  // (bits in PSW)
 148      =1  sbit CY       = PSW^7;
 149      =1  sbit AC       = PSW^6;
 150      =1  sbit F0       = PSW^5;
 151      =1  sbit RS1      = PSW^4;
 152      =1  sbit RS0      = PSW^3;
 153      =1  sbit OV       = PSW^2;
 154      =1  sbit F1       = PSW^1;
 155      =1  sbit P        = PSW^0;
 156      =1  
 157      =1  // (bits in IE)
 158      =1  sbit EA       = IE^7;
 159      =1  sbit GF4      = IE^6;
 160      =1  sbit ET2      = IE^5;
 161      =1  sbit ES       = IE^4;
 162      =1  sbit ES0      = IE^4;
 163      =1  sbit ET1      = IE^3;
 164      =1  sbit EX1      = IE^2;
 165      =1  sbit ET0      = IE^1;
 166      =1  sbit EX0      = IE^0;
 167      =1  
 168      =1  // (bits in IP0L)
 169      =1  sbit PX3L     = IP0L^7;
 170      =1  sbit PX2L     = IP0L^6;
 171      =1  sbit PT2L     = IP0L^5;
 172      =1  sbit PSL      = IP0L^4;
 173      =1  sbit PT1L     = IP0L^3;
 174      =1  sbit PX1L     = IP0L^2;
 175      =1  sbit PT0L     = IP0L^1;
 176      =1  sbit PX0L     = IP0L^0;
 177      =1  
 178      =1  sbit PT2      = IP^5;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 4   

 179      =1  sbit PS       = IP^4;
 180      =1  sbit PT1      = IP^3;
 181      =1  sbit PX1      = IP^2;
 182      =1  sbit PT0      = IP^1;
 183      =1  sbit PX0      = IP^0;
 184      =1  
 185      =1  //(bits in SCON0)
 186      =1  sbit FE       = SCON0^7;
 187      =1  sbit SM00     = SCON0^7;
 188      =1  sbit SM10     = SCON0^6;
 189      =1  sbit SM20     = SCON0^5;
 190      =1  sbit REN0     = SCON0^4;
 191      =1  sbit TB80     = SCON0^3;
 192      =1  sbit RB80     = SCON0^2;
 193      =1  sbit TI0      = SCON0^1;
 194      =1  sbit RI0      = SCON0^0;
 195      =1  
 196      =1  sbit SM0      = SCON^7;
 197      =1  sbit SM1      = SCON^6;
 198      =1  sbit SM2      = SCON^5;
 199      =1  sbit REN      = SCON^4;
 200      =1  sbit TB8      = SCON^3;
 201      =1  sbit RB8      = SCON^2;
 202      =1  sbit TI       = SCON^1;
 203      =1  sbit RI       = SCON^0;
 204      =1  
 205      =1  //(bits in SCON1)
 206      =1  sbit SM01     = SCON1^7;
 207      =1  sbit SM11     = SCON1^6;
 208      =1  sbit SM21     = SCON1^5;
 209      =1  sbit REN1     = SCON1^4;
 210      =1  sbit TB81     = SCON1^3;
 211      =1  sbit RB81     = SCON1^2;
 212      =1  sbit TI1      = SCON1^1;
 213      =1  sbit RI1      = SCON1^0;
 214      =1  
 215      =1  // (bits in TCON)
 216      =1  sbit TF1      = TCON^7;
 217      =1  sbit TR1      = TCON^6;
 218      =1  sbit TF0      = TCON^5;
 219      =1  sbit TR0      = TCON^4;
 220      =1  sbit IE1      = TCON^3;
 221      =1  sbit IT1      = TCON^2;
 222      =1  sbit IE0      = TCON^1;
 223      =1  sbit IT0      = TCON^0;
 224      =1  
 225      =1  // (bits in T2CON)
 226      =1  sbit TF2      = T2CON^7;
 227      =1  sbit EXF2     = T2CON^6;
 228      =1  sbit RCLK     = T2CON^5;
 229      =1  sbit TCLK     = T2CON^4;
 230      =1  sbit EXEN2    = T2CON^3;
 231      =1  sbit TR2      = T2CON^2;
 232      =1  sbit C_T2     = T2CON^1;
 233      =1  sbit CP_RL2   = T2CON^0;
 234      =1  
 235      =1  // (bits in CCON)
 236      =1  sbit CF       = CCON^7;
 237      =1  sbit CR       = CCON^6;
 238      =1  sbit CCF5     = CCON^5;
 239      =1  sbit CCF4     = CCON^4;
 240      =1  sbit CCF3     = CCON^3;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 5   

 241      =1  sbit CCF2     = CCON^2;
 242      =1  sbit CCF1     = CCON^1;
 243      =1  sbit CCF0     = CCON^0;
 244      =1  
 245      =1  // (bits in XICON)
 246      =1  sbit PX3      = XICON^7;
 247      =1  sbit IT3H     = XICON^7;
 248      =1  sbit EX3      = XICON^6;
 249      =1  sbit IE3      = XICON^5;
 250      =1  sbit IT3      = XICON^4;
 251      =1  sbit PX2      = XICON^3;
 252      =1  sbit IT2H     = XICON^3;
 253      =1  sbit EX2      = XICON^2;
 254      =1  sbit IE2      = XICON^1;
 255      =1  sbit IT2      = XICON^0;
 256      =1  
 257      =1  // (bits in P0)
 258      =1  sbit P07      = P0^7;
 259      =1  sbit P06      = P0^6;
 260      =1  sbit P05      = P0^5;
 261      =1  sbit P04      = P0^4;
 262      =1  sbit P03      = P0^3;
 263      =1  sbit P02      = P0^2;
 264      =1  sbit P01      = P0^1;
 265      =1  sbit P00      = P0^0;
 266      =1  
 267      =1  // (bits in P1)
 268      =1  sbit P17      = P1^7;
 269      =1  sbit P16      = P1^6;
 270      =1  sbit P15      = P1^5;
 271      =1  sbit P14      = P1^4;
 272      =1  sbit P13      = P1^3;
 273      =1  sbit P12      = P1^2;
 274      =1  sbit P11      = P1^1;
 275      =1  sbit P10      = P1^0;
 276      =1  
 277      =1  // (bits in P2)
 278      =1  sbit P27      = P2^7;
 279      =1  sbit P26      = P2^6;
 280      =1  sbit P25      = P2^5;
 281      =1  sbit P24      = P2^4;
 282      =1  sbit P23      = P2^3;
 283      =1  sbit P22      = P2^2;
 284      =1  sbit P21      = P2^1;
 285      =1  sbit P20      = P2^0;
 286      =1  
 287      =1  // (bits in P3)
 288      =1  sbit P37      = P3^7;
 289      =1  sbit P36      = P3^6;
 290      =1  sbit P35      = P3^5;
 291      =1  sbit P34      = P3^4;
 292      =1  sbit P33      = P3^3;
 293      =1  sbit P32      = P3^2;
 294      =1  sbit P31      = P3^1;
 295      =1  sbit P30      = P3^0;
 296      =1  
 297      =1  // (bits in P4)
 298      =1  sbit P47      = P4^7;
 299      =1  sbit P46      = P4^6;
 300      =1  sbit P45      = P4^5;
 301      =1  sbit P44      = P4^4;
 302      =1  sbit P43      = P4^3;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 6   

 303      =1  sbit P42      = P4^2;
 304      =1  sbit P41      = P4^1;
 305      =1  sbit P40      = P4^0;
 306      =1  
 307      =1  // (bits in P5)
 308      =1  sbit P53      = P5^3;
 309      =1  sbit P52      = P5^2;
 310      =1  sbit P51      = P5^1;
 311      =1  sbit P50      = P5^0;
 312      =1  
 313      =1  // (bits in P6)
 314      =1  sbit P61      = P6^1;
 315      =1  sbit P60      = P6^0;
 316      =1  
 317      =1  // (bits in P1, alternate)
 318      =1  sbit T2EX     = P1^1;
 319      =1  sbit T2       = P1^0;
 320      =1  sbit S2TXD    = P1^3;
 321      =1  sbit S2RXD    = P1^2;
 322      =1  
 323      =1  sbit SPI_CLK  = P1^7;
 324      =1  sbit SPI_MISO = P1^6;
 325      =1  sbit SPI_MOSI = P1^5;
 326      =1  sbit SPI_SS   = P1^4;
 327      =1  
 328      =1  sbit CEX5     = P1^7;
 329      =1  sbit CEX4     = P1^6;
 330      =1  sbit CEX3     = P1^5;
 331      =1  sbit CEX2     = P1^4;
 332      =1  sbit CEX1     = P1^3;
 333      =1  sbit CEX0     = P1^2;
 334      =1  sbit ECI      = P1^1;
 335      =1  
 336      =1  sbit AIN7     = P1^7;
 337      =1  sbit AIN6     = P1^6;
 338      =1  sbit AIN5     = P1^5;
 339      =1  sbit AIN4     = P1^4;
 340      =1  sbit AIN3     = P1^3;
 341      =1  sbit AIN2     = P1^2;
 342      =1  sbit AIN1     = P1^1;
 343      =1  sbit AIN0     = P1^0;
 344      =1  
 345      =1  //(bits in P2, alternate)
 346      =1  sbit KBI7     = P2^7;
 347      =1  sbit KBI6     = P2^6;
 348      =1  sbit KBI5     = P2^5;
 349      =1  sbit KBI4     = P2^4;
 350      =1  sbit KBI3     = P2^3;
 351      =1  sbit KBI2     = P2^2;
 352      =1  sbit KBI1     = P2^1;
 353      =1  sbit KBI0     = P2^0;
 354      =1  
 355      =1  // (bits in P3, alternate)
 356      =1  sbit RD       = P3^7;
 357      =1  sbit WR       = P3^6;
 358      =1  sbit T1       = P3^5;
 359      =1  sbit T0       = P3^4;
 360      =1  sbit INT1     = P3^3;
 361      =1  sbit INT0     = P3^2;
 362      =1  sbit TXD      = P3^1;
 363      =1  sbit RXD      = P3^0;
 364      =1  sbit T1CKO    = P3^5;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 7   

 365      =1  sbit T0CKO    = P3^4;
 366      =1  
 367      =1  // (bits in P4, alternate)
 368      =1  sbit INT2     = P4^3;
 369      =1  sbit INT3     = P4^2;
 370      =1  
 371      =1  sbit ALE      = P4^6;
 372      =1  
 373      =1  // (bits in P6, alternate)
 374      =1  sbit CKO      = P6^0;
 375      =1  sbit XOUT     = P6^0;
 376      =1  sbit XIN      = P6^1;
   2          #include <IO_DEFINE.h>
   1      =1  /***************************************
   2      =1  MEGWIN I/O DEFINE
   3      =1  ***************************************/
   4      =1  #ifndef IO_DEFINE_h_ 
   5      =1  #define IO_DEFINE_h_
   6      =1  
   7      =1  sbit TC_C    = P0^0;    //k=0x00;j=0x01;t=0x02;e=0x03; 
   8      =1  sbit RTD_C   = P0^1;    //r=0x04;s=0x05;b=0x06;n=0x07;
   9      =1  sbit mV_C    = P0^2;
  10      =1  sbit mA_C    = P0^3;     //tc= 000 00xxx;  rtd=000 01xxx;    mV=000 10xxx
  11      =1  sbit mV_OUT  = P0^4;     //mA= 000 11xxx;
  12      =1  sbit mA_OUT  = P0^5;
  13      =1  sbit UP_KEY   = P0^6;
  14      =1  sbit DOWN_KEY = P0^7;
  15      =1  
  16      =1  sbit LED1_SDA = P1^0;
  17      =1  sbit LED1_SCL = P1^2;
  18      =1  sbit LED1_LE  = P1^1;
  19      =1  sbit LED2_SDA  = P1^3;
  20      =1  sbit LED2_SCL  = P1^4;
  21      =1  sbit LED2_LE   = P1^5;
  22      =1  sbit RTC_SCL   = P1^6;
  23      =1  sbit none2     = P1^7;
  24      =1  
  25      =1  sbit AD_SDA   = P2^0;
  26      =1  sbit AD_SCL   = P2^1;
  27      =1  sbit ALL_SDA  = P2^2;
  28      =1  sbit EEP_SCL  = P2^3;
  29      =1  sbit OUT_SCL  = P2^4;
  30      =1  sbit NONE3    = P2^5;
  31      =1  sbit NONE_4   = P2^6;
  32      =1  sbit NONE_5   = P2^7;
  33      =1  sbit RTC_SDA  = P2^2;
  34      =1  
  35      =1  sbit R485_RX           = P3^0;
  36      =1  sbit R485_TX           = P3^1;
  37      =1  sbit FUNCTION_KEY      = P3^2;
  38      =1  sbit OFFSET_KEY        = P3^3;
  39      =1  sbit BEEP_OUT          = P3^4;   //for relay
  40      =1  sbit R485_DE_RE        = P3^5;
  41      =1  sbit NONE_6            = P3^6;
  42      =1  sbit NONE_7            = P3^7;
  43      =1  //------------------------
  44      =1  sbit EEPROM_SDA = P2^2;
  45      =1  sbit EEPROM_SCL = P2^3;
  46      =1  
  47      =1  sbit Value_SDA  = P2^0;
  48      =1  sbit Value_SCL  = P2^1;
  49      =1  sbit BEEP       = P3^4;  //for relay
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 8   

  50      =1  
  51      =1  sbit mV_SDA   = P2^2;
  52      =1  sbit mV_SCL   = P2^4;
  53      =1  sbit mA_SDA   = P2^2;
  54      =1  sbit mA_SCL   = P2^4;
  55      =1  
  56      =1  #endif
   3          #include <LED.h>
   1      =1  #ifndef LED_h_ 
   2      =1  #define LED_h_ 
   3      =1  
   4      =1  
   5      =1  void LED_Disp(unsigned char LEDs, unsigned  int disp_value);
   6      =1  void SETUP_LED_Disp(unsigned char SETUP_SELECT, unsigned int disp_value);
   7      =1  void LED_DATA_Write(unsigned char prt,unsigned char D5,unsigned char D4,unsigned char D3,unsigned char D2,
             -unsigned char D1,unsigned char D0);
   8      =1  void DAY_LED_Disp(unsigned char DD,unsigned char HH, unsigned char MM);
   9      =1  void LED_Init(void);
  10      =1  void LED_Cls(void);
  11      =1  void LED_Fill(void);
  12      =1  #endif
   4          
   5          
   6          //const unsigned char code tab_LED[23] = {
   7          //      0xAF,0xA0,0x6D,0xE9,0xE2,0xCB,0xCF,0xA1,0xEF,0xEB,0xE7,0xEF,0x0F,0xAF,0x4F,0x47,0xE6,0x67,0x00, 0xA7, 0
             -x0E, 0x40, 0xAE  };
   8          //     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F    H    P BLANK    n  
             -  L     -            U
   9          const unsigned char code tab_LED[28] = {
  10                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,0x76,0x73,0x00, 0x37, 0x3
             -8, 0x40, 0x3E,0x78,0x58,0x70,0x54,0x1E };
  11          //     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F    H    P BLANK    N  
             -  L     -            U   t        c        r
  12          const unsigned char code Point_tab_LED[23] = {
  13                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0xA7,0xFF,0xEF,0xF7,0xFC,0xB9,0xDE,0xF9,0xF1,0xF6,0xF3,0x80, 0xC7, 0xB
             -8, 0xC0, 0xBE  };
  14          //     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F    H    P BLANK    N  
             -  L     -            U
  15          extern unsigned char AV_COD;
  16          extern unsigned char NP_COD;
  17          extern unsigned char Work_Type;
  18          extern unsigned char ng_flog ;
  19          /**************************************************************************************/
  20          void LED_Disp(unsigned char LEDs, unsigned int disp_value)         // unsigned long int disp_value
  21          {
  22   1              unsigned char c  = LEDs;
  23   1              unsigned char D0 = 0;
  24   1              unsigned char D1 = 0;
  25   1              unsigned char D2 = 0;
  26   1              unsigned char D3 = 0;
  27   1              unsigned char D4 = 0;
  28   1              unsigned char D5 = 0;
  29   1              unsigned int D_value;
  30   1              
  31   1                D_value = disp_value;         //65536         131072
  32   1                c = 1;
  33   1      
  34   1          if (AV_COD == 1)
  35   1               { 
  36   2                 if( D_value < 10 )              //99999
  37   2                         {
  38   3                          D0 = tab_LED[18];
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 9   

  39   3                              D1 = tab_LED[18];
  40   3                              D2 = tab_LED[18];
  41   3                              if(Work_Type ==3)
  42   3                                {D2 = tab_LED[21];D3 = Point_tab_LED[0]; D4 = tab_LED[0]; D5 = tab_LED[D_value];}
  43   3                         else { if((NP_COD == 1)||(Work_Type ==2)) {D3 = tab_LED[18]; D4 = tab_LED[21]; D5 = tab_LED[D_value];
             -}
  44   4                                else { D3 = tab_LED[21]; D4 = Point_tab_LED[0];  D5 = tab_LED[D_value];}      
  45   4                              }
  46   3                         }
  47   2                      else if (D_value >= 10 && D_value < 100)
  48   2                        { 
  49   3                          D0 = tab_LED[18];
  50   3                              D1 = tab_LED[18];
  51   3                              D2 = tab_LED[18];
  52   3                               if(Work_Type ==3) {D2 = tab_LED[21]; D3 = Point_tab_LED[0]; D4 = tab_LED[D_value/10]; D5 = tab_LED[D_v
             -alue%10];}
  53   3                          else {if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[21]; D4 = tab_LED[D_value/10]; D5 = tab_LED[
             -D_value%10];}           
  54   4                                 else { D3 = tab_LED[21]; D4 = Point_tab_LED[D_value/10]; D5 = tab_LED[D_value%10]; }
  55   4                               }
  56   3                        }
  57   2                  else if (D_value >= 100 && D_value < 1000)
  58   2                        {
  59   3                          D0 = tab_LED[18];
  60   3                          D1 = tab_LED[18];
  61   3                              D2 = tab_LED[21];
  62   3                               if(Work_Type == 3) { D3 = Point_tab_LED[D_value/100]; D4 = tab_LED[(D_value%100)/10]; D5 = tab_LED[D_v
             -alue%10];}
  63   3                          else {if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[D_value/100]; D4 = tab_LED[(D_value%100)/10]
             -; D5 = tab_LED[D_value%10];}
  64   4                                else { D3 = tab_LED[D_value/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[D_value%1
             -0]; }
  65   4                               }
  66   3                         }
  67   2                  else if(D_value >= 1000 && D_value < 10000)
  68   2                        {
  69   3                          D0 = tab_LED[18];
  70   3                          D1 = tab_LED[21];
  71   3                              D2 = tab_LED[D_value/1000];     //9876
  72   3                               if(Work_Type == 3) { D3 = Point_tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_value%100)/10]; D5 = t
             -ab_LED[D_value%10];}
  73   3                  else { if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_
             -value%100)/10]; D5 = tab_LED[D_value%10];}
  74   4                                 else { D3 = tab_LED[(D_value%1000)/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[D
             -_value%10];}
  75   4                               }
  76   3                        }
  77   2                      else if(D_value >= 10000 && D_value < 100000)
  78   2                        {
  79   3                          D0 = tab_LED[21];              
  80   3                              D1 = tab_LED[D_value/10000];   
  81   3                              D2 = tab_LED[(D_value%10000)/1000];
  82   3                               if(Work_Type == 3) { D3 = Point_tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_value%100)/10]; D5 = t
             -ab_LED[D_value%10];}
  83   3                   else { if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D
             -_value%100)/10];D5 = tab_LED[D_value%10];}
  84   4                                  else { D3 = tab_LED[(D_value%1000)/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[
             -D_value%10];}
  85   4                                }
  86   3                        }
  87   2                }
  88   1              else 
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 10  

  89   1                {
  90   2                  if( D_value < 10 )            
  91   2               {
  92   3                          D0 = tab_LED[18];
  93   3                              D1 = tab_LED[18];
  94   3                              D2 = tab_LED[18];
  95   3      
  96   3                              if(Work_Type ==3) {D3 = Point_tab_LED[0]; D4 = tab_LED[0]; D5 = tab_LED[D_value];}
  97   3                              else { if((NP_COD == 1)||(Work_Type ==2))       { D3 = tab_LED[18]; D4 = tab_LED[18]; D5 = tab_LED[D_value];}
  98   4                                else { D3 = tab_LED[18]; D4 = Point_tab_LED[0];  D5 = tab_LED[D_value];}
  99   4                           }
 100   3                        }
 101   2                      else if (D_value >= 10 && D_value < 100)
 102   2                       { 
 103   3                          D0 = tab_LED[18];
 104   3                              D1 = tab_LED[18];
 105   3                              D2 = tab_LED[18];
 106   3      
 107   3                               if(Work_Type ==3) { D3 = Point_tab_LED[0]; D4 = tab_LED[D_value/10]; D5 = tab_LED[D_value%10];}
 108   3                          else {if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[18]; D4 = tab_LED[D_value/10]; D5 = tab_LED[
             -D_value%10];}
 109   4                                 else { D3 = tab_LED[18]; D4 = Point_tab_LED[D_value/10]; D5 = tab_LED[D_value%10]; }
 110   4                           }
 111   3                       }
 112   2                  else if (D_value >= 100 && D_value < 1000)
 113   2                        {
 114   3                          D0 = tab_LED[18];
 115   3                          D1 = tab_LED[18];
 116   3                              D2 = tab_LED[18];
 117   3      
 118   3                               if(Work_Type == 3) { D3 = Point_tab_LED[D_value/100]; D4 = tab_LED[(D_value%100)/10]; D5 = tab_LED[D_v
             -alue%10];}
 119   3                          else { if((NP_COD == 1)||(Work_Type ==2))   { D3 = tab_LED[D_value/100]; D4 = tab_LED[(D_value%100)/10
             -]; D5 = tab_LED[D_value%10];}
 120   4                                 else { D3 = tab_LED[D_value/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[D_value%
             -10]; }
 121   4                               }
 122   3                        }
 123   2                  else if(D_value >= 1000 && D_value < 10000)
 124   2                        {
 125   3                          D0 = tab_LED[18];
 126   3                          D1 = tab_LED[18];
 127   3                              D2 = tab_LED[D_value/1000];     
 128   3      
 129   3                               if(Work_Type == 3) { D3 = Point_tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_value%100)/10]; D5 = t
             -ab_LED[D_value%10];}
 130   3                  else { if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_
             -value%100)/10]; D5 = tab_LED[D_value%10];}
 131   4                                 else { D3 = tab_LED[(D_value%1000)/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[D
             -_value%10];}
 132   4                               }
 133   3                        }
 134   2                      else if(D_value >= 10000 && D_value < 100000)
 135   2                        {
 136   3                          D0 = tab_LED[18];              
 137   3                              D1 = tab_LED[D_value/10000];   
 138   3                              D2 = tab_LED[(D_value%10000)/1000];
 139   3      
 140   3                               if(Work_Type == 3) { D3 = Point_tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D_value%100)/10]; D5 = t
             -ab_LED[D_value%10];}
 141   3                   else { if((NP_COD == 1)||(Work_Type ==2)) { D3 = tab_LED[(D_value%1000)/100]; D4 = tab_LED[(D
             -_value%100)/10];D5 = tab_LED[D_value%10];}
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 11  

 142   4                                  else { D3 = tab_LED[(D_value%1000)/100]; D4 = Point_tab_LED[(D_value%100)/10]; D5 = tab_LED[
             -D_value%10];}                
 143   4                            }
 144   3                        }
 145   2                 }
 146   1              LED_DATA_Write(1,D5,D4,D3,D2,D1,D0);
 147   1      }
 148          /***********************************************************************/
 149          void SETUP_LED_Disp(unsigned char SETUP_SELECT, unsigned int disp_value)
 150          {
 151   1              unsigned char setup_status, D0, D1, D2, D3, D4, D5, D6,K2,K3,K4,K5;
 152   1              unsigned int D_Value;
 153   1              unsigned int D_Count;  
 154   1      
 155   1                setup_status = SETUP_SELECT;
 156   1      
 157   1                 D_Count = disp_value;
 158   1      
 159   1                if (setup_status == 0)                   //P0xSEP
 160   1                  { 
 161   2                     D0 =     tab_LED[17];
 162   2                         D1 = tab_LED[0] ;
 163   2                         D2 = tab_LED[18];
 164   2                         D3 = tab_LED[5];
 165   2                         D4 = tab_LED[14];
 166   2                         D5 = tab_LED[17];
 167   2                      }
 168   1           else if (setup_status == 1)                  //Mode_TYPE   
 169   1                  { 
 170   2                    if(D_Count == 0)
 171   2                     {
 172   3                           D0 =       tab_LED[17];  // TC
 173   3                           D1 =   tab_LED[1] ;
 174   3                           D2 =   tab_LED[18];
 175   3                           D3 =       tab_LED[18];
 176   3                           D4 =       tab_LED[23];
 177   3                           D5 =       tab_LED[24];
 178   3                         }
 179   2                        if(D_Count == 1)
 180   2                     {
 181   3                           D0 =       tab_LED[17];    //RTD
 182   3                           D1 =   tab_LED[1] ;
 183   3                           D2 =   tab_LED[18];
 184   3                           D3 =       tab_LED[25];
 185   3                           D4 =       tab_LED[23];
 186   3                           D5 =       tab_LED[13];
 187   3                         }
 188   2                        if(D_Count == 2)
 189   2                     { 
 190   3                           D0 =       tab_LED[17];    // mV
 191   3                           D1 =   tab_LED[1] ;
 192   3                           D2 =   tab_LED[18];
 193   3                           D3 =       tab_LED[18];
 194   3                           D4 =       tab_LED[18];
 195   3                           D5 =       tab_LED[22];
 196   3                         }
 197   2                        if(D_Count == 3)
 198   2                     {
 199   3                           D0 =       tab_LED[17];   // mA
 200   3                           D1 =   tab_LED[1] ;
 201   3                           D2 =   tab_LED[18];
 202   3                           D3 =       tab_LED[18];
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 12  

 203   3                           D4 =       tab_LED[18];
 204   3                           D5 =       tab_LED[10];
 205   3                         }
 206   2                  }
 207   1            else if(setup_status == 2)
 208   1                  {
 209   2                       if(D_Count == 0)
 210   2                    {
 211   3                          D0 =        tab_LED[17]; // DISP_C
 212   3                          D1 =    tab_LED[2] ;
 213   3                          D2 =    tab_LED[18];
 214   3                          D3 =        tab_LED[18];
 215   3                          D4 =        tab_LED[18];
 216   3                          D5 =        tab_LED[12];
 217   3                        }
 218   2                      else if(D_Count == 1)
 219   2                    {
 220   3                          D0 =    tab_LED[17];  //DISP_F
 221   3                          D1 =    tab_LED[2] ;
 222   3                          D2 =    tab_LED[18];
 223   3                          D3 =        tab_LED[18];
 224   3                          D4 =        tab_LED[18];
 225   3                          D5 =        tab_LED[15];
 226   3                        }
 227   2                  }
 228   1            else if (setup_status ==  3)              //TC_SELECT 
 229   1                  {
 230   2                   if(D_Count == 0)
 231   2                     { D0 =   tab_LED[17]; // K
 232   3                           D1 = tab_LED[3] ;
 233   3                           D2 = tab_LED[18];
 234   3                           D3 =       tab_LED[18];
 235   3                           D4 = 0x74;//       tab_LED[12];
 236   3                           D5 =       tab_LED[18];
 237   3                         }
 238   2                       if(D_Count == 1)
 239   2                     { D0 =   tab_LED[17];  //J
 240   3                           D1 = tab_LED[3] ;
 241   3                           D2 = tab_LED[18];
 242   3                           D3 =       tab_LED[18];
 243   3                           D4 =       tab_LED[27];
 244   3                           D5 =       tab_LED[18];
 245   3                         }
 246   2                       if(D_Count == 2)
 247   2                     { D0 =   tab_LED[17]; // T
 248   3                           D1 = tab_LED[3] ;
 249   3                           D2 = tab_LED[18];
 250   3                           D3 =       tab_LED[18];
 251   3                           D4 =       tab_LED[23];
 252   3                           D5 =       tab_LED[18];
 253   3                         }
 254   2                       if(D_Count == 3)
 255   2                     { D0 =   tab_LED[17]; // E
 256   3                           D1 = tab_LED[3] ;
 257   3                           D2 = tab_LED[18];
 258   3                           D3 =       tab_LED[18];
 259   3                           D4 =       tab_LED[14];
 260   3                           D5 =       tab_LED[18];
 261   3                         }
 262   2                       if(D_Count == 4)
 263   2                     { D0 =   tab_LED[17]; // TC_R
 264   3                           D1 = tab_LED[3] ;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 13  

 265   3                           D2 = tab_LED[18];
 266   3                           D3 =       tab_LED[18];
 267   3                           D4 =       tab_LED[25];
 268   3                           D5 =       tab_LED[18];
 269   3                         }
 270   2                       if(D_Count == 5)
 271   2                     { D0 =   tab_LED[17]; // TC_S
 272   3                           D1 = tab_LED[3] ;
 273   3                           D2 = tab_LED[18];
 274   3                           D3 =       tab_LED[18];
 275   3                           D4 = 0x6d; //      tab_LED[12];
 276   3                           D5 =       tab_LED[18];
 277   3                          }
 278   2      /*
 279   2                       if(D_Count == 6)
 280   2                     { D0 =   tab_LED[17]; // TC_B
 281   2                           D1 = tab_LED[3] ;
 282   2                           D2 = tab_LED[18];
 283   2                           D3 =       tab_LED[18];
 284   2                           D4 =       tab_LED[12];
 285   2                           D5 =       tab_LED[18];
 286   2                         }
 287   2                       if(D_Count == 7)
 288   2                     { D0 =   tab_LED[17]; // TC_N
 289   2                           D1 = tab_LED[3] ;
 290   2                           D2 = tab_LED[18];
 291   2                           D3 =       tab_LED[18];
 292   2                           D4 =       tab_LED[12];
 293   2                           D5 =       tab_LED[18];
 294   2                         }                     */
 295   2                       }
 296   1                else if ((setup_status >= 4)&&(setup_status <= 13))               //TC_Zero_offset
 297   1                   {
 298   2                           D_Value = disp_value;
 299   2      
 300   2                 if (setup_status ==  4)                  //TC_Zero_offset
 301   2                 {
 302   3                        D0 = tab_LED[23];
 303   3                            D1 = 0x5c;// tab_LED[4];
 304   3                            D6 = 0 ;
 305   3                         }
 306   2                    else if (setup_status ==  5)              //TC_Span_offset
 307   2                 {
 308   3                     D0 = tab_LED[23];
 309   3                         D1 = 0x6d; //tab_LED[5];
 310   3                         D6 = 0 ;
 311   3                        }
 312   2              else if (setup_status ==  6)            //RTD_Zero_offset
 313   2                {
 314   3                     D0 = tab_LED[25];
 315   3                         D1 = 0x5c;//tab_LED[6];
 316   3                         D6 = 0 ;
 317   3                       }
 318   2              else if (setup_status ==  7)            //RTD_Span_offset
 319   2               {
 320   3                     D0 = tab_LED[25];
 321   3                         D1 = 0x6d;//tab_LED[7];
 322   3                         D6 = 0 ;
 323   3                      }
 324   2                  else if (setup_status ==  8)                //mV_Zero_offset
 325   2              {
 326   3                     D0 = tab_LED[22];
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 14  

 327   3                         D1 = 0x5c;//tab_LED[8];
 328   3                         D6 = 0 ;
 329   3                      }
 330   2                 else if (setup_status ==  9)         //mV_Span_offset
 331   2              {
 332   3                     D0 = tab_LED[22];
 333   3                         D1 = 0x6d; //tab_LED[9];
 334   3                         D6 = 0 ;
 335   3                      }
 336   2                 else if (setup_status ==  10)                //mA_Zero_OFFSET
 337   2              {
 338   3                     D0 = tab_LED[10];
 339   3                         D1 = 0x5c;//tab_LED[10];
 340   3                         D6 = 0 ;
 341   3                      }
 342   2                else if (setup_status ==  11)         //mA_Span_OFFSET
 343   2              {
 344   3                     D0 = tab_LED[10];
 345   3                         D1 = 0x6d;//tab_LED[11];
 346   3                         D6 = 0 ;
 347   3                      }
 348   2                else if (setup_status ==  12)         //Alarm_ Lo_Set
 349   2              {
 350   3                     D0 = tab_LED[10];
 351   3                         D1 = tab_LED[20];
 352   3                         D6 = 0 ;
 353   3                      }
 354   2                else if (setup_status ==  13)         //Alarm_HI_set
 355   2              {
 356   3                     D0 = tab_LED[10];
 357   3                         D1 = tab_LED[16];
 358   3                         D6 = 0 ;
 359   3                      }
 360   2            if (D_Value >= 0  && D_Value < 10)                //   Show Value 99999
 361   2                  {
 362   3                              D2 = tab_LED[18];
 363   3                          D3 = tab_LED[18];
 364   3                              if((D6 == 0)&&(NP_COD == 0))
 365   3                                {
 366   4                                 D4 = Point_tab_LED[0];
 367   4                                }
 368   3                         else
 369   3                           {
 370   4                                 D4 = tab_LED[0];
 371   4                               } 
 372   3                              D5 = tab_LED[D_Value%10];
 373   3                        }
 374   2                      if (D_Value >= 10 && D_Value < 100)
 375   2                        { 
 376   3                              D2 = tab_LED[18];
 377   3                          D3 = tab_LED[18];
 378   3                              if((D6 == 0)&&(NP_COD == 0)) {D4 = Point_tab_LED[D_Value/10];} else {D4 = tab_LED[D_Value/10];}
 379   3                              D5 = tab_LED[D_Value%10];
 380   3                        }
 381   2                  if (D_Value >=100 && D_Value < 1000)
 382   2                        {
 383   3                              D2 = tab_LED[18];
 384   3                              D3 = tab_LED[D_Value/100]; //987 
 385   3                              if((D6 == 0)&&(NP_COD == 0)) {D4 = Point_tab_LED[(D_Value%100)/10];} else {D4 = tab_LED[(D_Value%100)/1
             -0];}
 386   3                              D5 = tab_LED[D_Value%10];
 387   3                        }
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 15  

 388   2                  if (D_Value >=1000 && D_Value < 10000)
 389   2                        {
 390   3                              D2 = tab_LED[D_Value/1000];     //9876
 391   3                          D3 = tab_LED[(D_Value%1000)/100];
 392   3                              if((D6 == 0)&&(NP_COD == 0)) {D4 = Point_tab_LED[(D_Value%100)/10];} else {D4 = tab_LED[(D_Value%100)/1
             -0];}
 393   3                              D5 = tab_LED[D_Value%10];
 394   3                        }
 395   2                      if (D_Value >= 10000 && D_Value < 100000)
 396   2                        {
 397   3                          D1 = tab_LED[D_Value/10000];   //98765
 398   3                              D2 = tab_LED[(D_Value%10000)/1000];     
 399   3                          D3 = tab_LED[(D_Value%1000)/100];   
 400   3                              if((D6 == 0)&&(NP_COD == 0)){D4 = Point_tab_LED[(D_Value%100)/10];} else {D4 = tab_LED[(D_Value%100)/10
             -];}                
 401   3                              D5 = tab_LED[D_Value%10];               
 402   3                        }
 403   2                }
 404   1              else if ((setup_status >= 14)||(setup_status <= 20))
 405   1                {
 406   2                 if (setup_status ==  14)             //Year_set
 407   2              {
 408   3                     D0 = 0x6e;
 409   3                         D1 = tab_LED[25];
 410   3                  }
 411   2                else if (setup_status ==  15)         //Mon_set
 412   2              {
 413   3                     D0 = tab_LED[19];
 414   3                         D1 = tab_LED[0];
 415   3                      }
 416   2                 else if (setup_status ==  16)                //Day_set
 417   2              {
 418   3                     D0 = tab_LED[13];
 419   3                         D1 = 0x6e;
 420   3                      }
 421   2                  else if (setup_status ==  17)               //Hour_set
 422   2              {
 423   3                     D0 = tab_LED[16];
 424   3                         D1 = tab_LED[25];
 425   3                      }
 426   2                  else if (setup_status ==  18)               //Min_set
 427   2              {
 428   3                     D0 = tab_LED[19];
 429   3                         D1 = tab_LED[1];
 430   3                      }
 431   2      
 432   2                   D_Value = disp_value;
 433   2      
 434   2                        K5 = D_Value&0x000f;
 435   2                        D_Value = D_Value >> 4;
 436   2                        K4 = D_Value&0x000f;
 437   2                        D_Value = D_Value >> 4;
 438   2                        K3 = D_Value&0x000f;
 439   2                        D_Value = D_Value >> 4;
 440   2                        K2 = D_Value&0x000f;
 441   2                        D6 = 1 ;
 442   2                  if (K2 == 0 )
 443   2                         {
 444   3                           D2 = tab_LED[18];
 445   3      
 446   3                           if (K3 == 0 )
 447   3                                 {
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 16  

 448   4                                   D3 = tab_LED[18];
 449   4                                       D4 = tab_LED[K4];
 450   4                                       D5 = tab_LED[K5];
 451   4                                 }
 452   3                               else
 453   3                                 {
 454   4                                       D3 = tab_LED[K3];
 455   4                                       D4 = tab_LED[K4];
 456   4                                       D5 = tab_LED[K5];
 457   4                                 }
 458   3                              }
 459   2                        else
 460   2                         {
 461   3                               D2 = tab_LED[K2];
 462   3                               D3 = tab_LED[K3];
 463   3                                       D4 = tab_LED[K4];
 464   3                         }     D5 = tab_LED[K5];
 465   2                }
 466   1              else if (setup_status >= 22)
 467   1                 {
 468   2                          D0 =    0x00;  //DISP_YES
 469   2                          D1 =    0x00;
 470   2                          D2 =    0x00;
 471   2                          D3 =        0x6E;
 472   2                          D4 =        0x79;      
 473   2                          D5 =        0x6B; //s
 474   2                 }
 475   1      
 476   1               LED_DATA_Write(1,D5,D4,D3,D2,D1,D0);
 477   1      }
 478          /**********************************************************/
 479          void DAY_LED_Disp(unsigned char DD,unsigned char HH, unsigned char MM)     // unsigned long int disp_value
 480          {
 481   1              unsigned char D0 = 0;
 482   1              unsigned char D1 = 0;
 483   1              unsigned char D2 = 0;
 484   1              unsigned char D3 = 0;
 485   1              unsigned char D4 = 0;
 486   1              unsigned char D5 = 0;
 487   1              unsigned char D_FD,H_FH,M_FM ;
 488   1      
 489   1                              M_FM = MM ;
 490   1                              D5 = Point_tab_LED[(M_FM&0x0f)];
 491   1                              M_FM = (M_FM >> 4)&0x0f;
 492   1                              D4 = tab_LED[M_FM];
 493   1      
 494   1                              H_FH  = HH ;
 495   1                              D3 = Point_tab_LED[(H_FH&0x0f)];
 496   1                              H_FH = (H_FH >> 4)&0x0f;
 497   1                              D2 = tab_LED[H_FH];
 498   1      
 499   1                              D_FD = DD ;
 500   1                              D1 = Point_tab_LED[(D_FD&0x0f)];
 501   1                          D_FD = (D_FD >> 4)&0x0f;
 502   1                          D0 = tab_LED[D_FD];
 503   1      
 504   1               LED_DATA_Write(1,D5,D4,D3,D2,D1,D0);
 505   1      }
 506          /************************************************/
 507          void LED_Fill(void)
 508          {
 509   1         unsigned char D0,D1,D2,D3,D4,D5;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 17  

 510   1      
 511   1                  D0 = Point_tab_LED[8];
 512   1                          D1 = Point_tab_LED[8];
 513   1                              D2 = Point_tab_LED[8];  
 514   1                          D3 = Point_tab_LED[8];   
 515   1                              D4 = Point_tab_LED[8];          
 516   1                              D5 = Point_tab_LED[8];
 517   1      
 518   1      
 519   1                  LED_DATA_Write(1,D5,D4,D3,D2,D1,D0);
 520   1      }
 521          /*********************************************************/
 522          void _BitDly(void)               // wait 4.7uS, or thereabouts
 523          {                                   // tune to xtal. This works at 11.0592MHz
 524   1              unsigned char   k;
 525   1              
 526   1              for (k=0; k<0x12; k++);
 527   1      }
 528          /*********************************/
 529          void LED_Init(void)
 530          {
 531   1              unsigned int i;
 532   1       
 533   1              LED1_LE  = 0;
 534   1              LED2_LE  = 0;
 535   1              LED1_SCL = 0;
 536   1              LED1_SDA = 0;
 537   1              LED2_SCL = 0;
 538   1              LED2_SDA = 0;
 539   1      
 540   1              _BitDly();
 541   1              _BitDly();
 542   1              _BitDly();
 543   1              _BitDly();
 544   1      
 545   1              for(i = 0; i < 0x100; i++);   
 546   1      }
 547          /***********************************/
 548          void LED_Cls(void)
 549          {
 550   1              LED_Disp(1,0);
 551   1      }
 552          /**********************************/
 553          void  LED_DATA_Write(unsigned char prt,unsigned char D5,unsigned char D4,unsigned char D3,unsigned char D2
             -,unsigned char D1,unsigned char D0)
 554          {
 555   1          unsigned char c, DISP_CODE, D_count, D_time ;
 556   1                               c = prt ;
 557   1                                    c = 1;
 558   1                                                DISP_CODE = D0 ;
 559   1                if (c == 1)
 560   1                  {
 561   2                         LED1_LE = 0 ;                // off led
 562   2      
 563   2                         for(D_time = 0; D_time < 2; D_time++)
 564   2                           {
 565   3                              LED1_SCL = 0;
 566   3                                      LED1_SDA = 0;
 567   3                                 for(D_count = 0; D_count < 8; D_count++)
 568   3                                   {
 569   4                                    _BitDly();
 570   4                                   LED1_SCL = 1 ;
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 18  

 571   4                                       _BitDly();
 572   4                                           LED1_SCL = 0;
 573   4                                       }
 574   3                                }
 575   2                         for(D_time = 0; D_time < 6;D_time++)
 576   2                           {
 577   3                              LED1_SCL = 0;
 578   3                                      LED1_SDA = 0;
 579   3                                 for(D_count = 0; D_count < 8; D_count++)
 580   3                                   {
 581   4                                 if(DISP_CODE & 0x80){LED1_SDA = 1;}            //d7 - d0
 582   4                                   _BitDly();
 583   4                                   LED1_SCL = 1 ;
 584   4                                       _BitDly();
 585   4                                           LED1_SCL = 0;
 586   4                                               LED1_SDA = 0;
 587   4                                           DISP_CODE = DISP_CODE << 1;
 588   4                                       }
 589   3                                       if (D_time  == 0)  DISP_CODE = D1;
 590   3                                       else if (D_time  == 1)  DISP_CODE = D2;
 591   3                                       else if (D_time  == 2)  DISP_CODE = D3;
 592   3                                       else if (D_time  == 3)  DISP_CODE = D4;
 593   3                                       else if (D_time  == 4)  DISP_CODE = D5;
 594   3                                 }
 595   2                                LED1_LE  = 1 ;           //on led
 596   2                                _BitDly();
 597   2                                LED1_LE  = 0 ;
 598   2               }
 599   1                  if(c == 2)
 600   1                   {
 601   2                            LED2_LE = 0;
 602   2      
 603   2                         for(D_time = 0; D_time< 6; D_time++)
 604   2                           {
 605   3                              LED2_SCL = 0;
 606   3      
 607   3                                 for(D_count= 0; D_count<8; D_count++)
 608   3                                   {
 609   4                                 if(DISP_CODE & 0x80) {LED2_SDA = 1;}
 610   4                                   _BitDly();
 611   4                                   LED2_SCL = 1 ;
 612   4                                       _BitDly();
 613   4                                           LED2_SCL = 0;
 614   4                                               LED2_SDA = 0;
 615   4                                           DISP_CODE = DISP_CODE << 1;
 616   4                                   }
 617   3                                       if (D_time  == 0)  DISP_CODE = D1;
 618   3                                       else if (D_time  == 1)  DISP_CODE = D2;
 619   3                                       else if (D_time  == 2)  DISP_CODE = D3;
 620   3                                       else if (D_time  == 3)  DISP_CODE = D4;
 621   3                                       else if (D_time  == 4)  DISP_CODE = D5;
 622   3                                 }
 623   2                              LED2_LE = 1;
 624   2                              _BitDly();
 625   2                                LED2_LE  = 0 ;
 626   2              }
 627   1              
 628   1       }
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 19  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


R485_RX. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
CCF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
TB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
PCAPWM4. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
P1M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
CCF3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
TB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
PCAPWM5. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
P2M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
R485_TX. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
CCF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
SM00 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
P3M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
CCF5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
SM01 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
SM10 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
P4M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
SM11 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM20 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
ISPCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
P5M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
P4M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
XICON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
EEPROM_SDA . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
DOWN_KEY . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
SM21 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
EVRCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
P5M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
SPCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P5 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
SFRPI. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
WDTCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
mV_SCL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
KBI0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
SPI_MOSI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
SPI_MISO . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
_DAY_LED_Disp. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  DD . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  HH . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  MM . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  D0 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  D1 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  D2 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  D3 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  D4 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  D5 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  D_FD . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  H_FH . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  M_FM . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
mA_OUT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
KBI1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
SPCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
KBI2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
AIN0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
CF . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
AUXIP. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
KBI3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
AIN1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
KBI4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
AIN2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
CH . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
KBI5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
AIN3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
KBI6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
AIN4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
EEPROM_SCL . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
RTD_C. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
KBI7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
AIN5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
AIN6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
CL . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
AIN7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
CEX0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
CCAP0H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
ADCH . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
CEX1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
CCAP1H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
ALL_SDA. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
CEX2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
CCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
OFFSET_KEY . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
CEX3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
CCAP3H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
CEX4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
CCAP4H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
CCAP0L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
ADCL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
CEX5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
REN0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
CCAP5H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
CCAP1L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
CCAPM0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


IP0L . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
REN1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
CCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
CCAPM1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
IT2H . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
TSTWD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
CCAP3L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
CCAPM2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
IT3H . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
CCAP4L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
CCAPM3 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
CCAP5L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
CCAPM4 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
CCAPM5 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
BEEP . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
mV_OUT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
EEP_SCL. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
INT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
INT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
ADCV . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
STRETCH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
PT0L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PT1L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
RTC_SDA. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PT2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
T2EX . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
CMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
CCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
SCFG . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
PX0L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
PX1L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
RCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PX2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
SPI_CLK. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
PX3L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BFH  1
SCMD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
Work_Type. . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
_BitDly. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  k. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SPISTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
RTC_SCL. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
P00. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


IFADRH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
P10. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P01. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IFMT . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E5H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
P20. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P11. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P02. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
P30. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P21. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P12. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P03. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
FUNCTION_KEY . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P40. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
P31. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P22. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P13. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P04. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
IFADRL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
P50. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
P41. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
P32. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P23. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
P14. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P05. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
P60. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
P51. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
P42. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
P33. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P24. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P15. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P06. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
P61. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
P52. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
P43. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
P34. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P25. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P16. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P07. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
P53. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
P44. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
P35. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
P26. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P17. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
Value_SDA. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P45. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
P36. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P27. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
TC_C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
P46. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
P37. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
P47. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
KBMASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_SETUP_LED_Disp. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  SETUP_SELECT . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  disp_value . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  setup_status . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  D0 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  D1 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  D2 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  D3 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  D4 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  D5 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0008H  1
  D6 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0009H  1
  K2 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  K3 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  K4 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  K5 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  D_Value. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    000AH  2
  D_Count. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
OUT_SCL. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
AD_SDA . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
LED_Fill . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  D0 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  D1 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  D2 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  D3 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  D4 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  D5 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
_LED_DATA_Write. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  prt. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  D5 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  D4 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  D3 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  D2 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  D1 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  D0 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  DISP_CODE. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0002H  1
  D_count. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  D_time . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
LED1_SDA . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
IE2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
LED2_SDA . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
IE3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
GF4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
AUXR . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
KBPATN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
Value_SCL. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
NONE_4 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
NONE_5 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
NONE_6 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
SPIDAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
_LED_Disp. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  LEDs . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  disp_value . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  D0 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  D1 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  D2 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  D3 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  D4 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  D5 . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  D_value. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
NONE_7 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
AD_SCL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
LED1_SCL . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
LED2_SCL . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
LED_Init . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
AV_COD . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
IT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
EX2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
IT3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
EX3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
mA_C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
XOUT . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ECI. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SPICTL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
AUXIPH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
ALE. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
IFD. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
NP_COD . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 25  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


R485_DE_RE . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
EIP1H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
LED_Cls. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
PX2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
PX3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
Point_tab_LED. . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    001CH  23
EIP1L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
CKO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
PCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SPSTAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
IPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
T0CKO. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
PCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
SBUF1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
T1CKO. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
PCON2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
S2BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
NONE3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
none2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
SCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
mV_C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
ADCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
mA_SDA . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
T2MOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
ADCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
ADCVL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
S1BRT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
tab_LED. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  28
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
KBCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
UP_KEY . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
XIN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
PSL. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
mA_SCL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
AUXR0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
SPI_SS . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
AUXR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
C51 COMPILER V9.02   LED                                                                   01/05/2015 11:22:37 PAGE 26  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


S2RXD. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
BEEP_OUT . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
S2TXD. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
LED1_LE. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
LED2_LE. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
PCAPWM0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
PCAPWM1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
mV_SDA . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
CCF0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
RB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
PCAPWM2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
CCF1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
RB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
PCAPWM3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
SPDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
P0M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
AUXIE. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4061    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
