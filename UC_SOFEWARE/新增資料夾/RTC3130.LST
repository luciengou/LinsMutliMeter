C51 COMPILER V9.02   RTC3130                                                               10/24/2014 13:34:53 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE RTC3130
OBJECT MODULE PLACED IN RTC3130.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE RTC3130.C OMF2 BROWSE DEBUG

line level    source

   1          /************************************
   2          **          RTC3130 DEVICE             **
   3           00h = control code
   4             WRITE_COM = 02H must change to 00H when finished
   5             READ_COM  = 01H must change to 00H when finished
   6           01h = control code      00H
   7           02h= sec  BCD     0-59
   8           03h= min          59
   9           04h= hour             24
  10           05h= week              7
  11           06h= day              31
  12           07h= month                12
  13           08h= year          00-99
  14           09h= alarm sec
  15           0ah= alarm min
  16           0bh= alarm hour
  17           0ch= alarm day
  18           0dh= alarm year
  19           0eh= control code      00H
  20          
  21          *************************************/
  22          #include <MG82FE564.H>
  23          #include <RTC3130.h>
  24          #include <IO_DEFINE.h>
  25          
  26          #define  RTC_ADDR  0xD0
  27          #define  MEMORY_ADDR 0xA0
  28          #define  RTC_WRITE_COM  0x01
  29          #define  RTC_READ_COM   0x02
  30          #define  FINISHED_COM   0
  31          
  32          #define  TRUE   1
  33          #define  FALSE  0
  34          /*
  35          sbit RTC_SCL    = P2^5;
  36          sbit RTC_SDA    = P2^2;
  37          */
  38          unsigned char  RTC_ack ;
  39          /*******************************/
  40          void RTC_Delay(unsigned int i)
  41          {
  42   1         unsigned char j;
  43   1        if(i>0) i--;
  44   1       for (j=0; j<250; j++);
  45   1      }
  46          //==============================
  47          void RTC_BitDly(void)               // wait 4.7uS, or thereabouts
  48          {                                   // tune to xtal. This works at 11.0592MHz
  49   1              unsigned char   i;
  50   1              
  51   1              for (i=0; i<0x12; i++);
  52   1      }
  53          //============================
  54          void RTC_Init(void)
  55          {
C51 COMPILER V9.02   RTC3130                                                               10/24/2014 13:34:53 PAGE 2   

  56   1              unsigned int i;
  57   1      
  58   1              RTC_SCL = 1;
  59   1              RTC_BitDly();
  60   1              RTC_BitDly();
  61   1              RTC_BitDly();
  62   1              RTC_BitDly();
  63   1              RTC_SDA = 0;
  64   1      //      RTC_SCL = 0;
  65   1              for(i = 0; i < 0x100; i++); 
  66   1       
  67   1      }
  68          //===================================
  69          void RTC_start0(void)
  70          {
  71   1              RTC_SDA = 1;
  72   1              RTC_BitDly();
  73   1              RTC_SDA = 0;
  74   1              RTC_BitDly();
  75   1              RTC_SCL = 0;
  76   1              RTC_BitDly();
  77   1      }
  78          //====================================
  79          void RTC_stop0(void)
  80          {
  81   1              RTC_SDA = 0;
  82   1              RTC_BitDly();
  83   1              RTC_SCL = 1;
  84   1              RTC_BitDly();
  85   1              RTC_SDA = 1;
  86   1              RTC_BitDly();
  87   1      }
  88          //====================================
  89          void RTC_restart0(void)
  90          {
  91   1              RTC_SDA = 1;
  92   1              RTC_BitDly();
  93   1              RTC_SCL = 1;
  94   1              RTC_BitDly();
  95   1              RTC_SDA = 0;
  96   1              RTC_BitDly();
  97   1              RTC_SCL = 0;
  98   1              RTC_BitDly();  
  99   1      }
 100          //====================================
 101          void RTC_write_byte0(unsigned char bt)
 102          {
 103   1              idata unsigned char i;
 104   1      
 105   1              RTC_ack = TRUE;                                         //default have ack
 106   1        
 107   1              for (i=0; i<8; i++)
 108   1              {
 109   2                      if (bt & 0x80)
 110   2                         RTC_SDA = 1;         // send each bit, MSB first
 111   2                      else
 112   2                         RTC_SDA = 0;
 113   2                         RTC_SCL = 1;
 114   2                         RTC_BitDly();
 115   2                         RTC_SCL = 0;
 116   2                         RTC_BitDly();
 117   2                         bt <<= 1;
C51 COMPILER V9.02   RTC3130                                                               10/24/2014 13:34:53 PAGE 3   

 118   2              }
 119   1      
 120   1              RTC_SDA = 1;                                // change input and listen for ACK
 121   1              RTC_SCL = 1;
 122   1              RTC_BitDly();
 123   1      
 124   1              if (RTC_SDA)
 125   1                      RTC_ack = FALSE;                        // ack didn't happen, may be nothing out there
 126   1                  RTC_SCL = 0;
 127   1                  RTC_BitDly();
 128   1      }
 129          //======================================
 130          unsigned char RTC_read_byte0(void)              // lastone == 1 for last byte
 131          {
 132   1              idata unsigned char i, res;
 133   1              res = 0;
 134   1              RTC_SDA = 1;
 135   1      
 136   1              for (i=0; i<8; i++)                 // each bit at a time, MSB first
 137   1              {
 138   2                      RTC_SCL = 1;
 139   2                  RTC_BitDly();
 140   2                            res <<= 1;
 141   2                      if (RTC_SDA)            res |= 1;
 142   2                          RTC_SCL = 0;
 143   2                          RTC_BitDly();
 144   2              }
 145   1              RTC_SDA = 1;                    // send ACK according to 'lastone'
 146   1              RTC_SCL = 1;
 147   1              RTC_BitDly();
 148   1              RTC_SCL = 0;
 149   1              RTC_SDA = 1;
 150   1              RTC_BitDly();
 151   1              return(res);
 152   1      }
 153          //==========================================
 154          void RTC_write_byte(unsigned char reg_addr, unsigned char reg_data)
 155          {
 156   1              RTC_start0();                                           //send start bit
 157   1              RTC_write_byte0(RTC_ADDR);
 158   1              RTC_write_byte0(reg_addr);                      //send low address
 159   1              RTC_write_byte0(reg_data);                      //send low data
 160   1              RTC_stop0();                                            //stop
 161   1              RTC_Delay(100);                                             // wait for write cycle time
 162   1      }
 163          //=====================================================
 164          unsigned char RTC_read_byte(unsigned char reg_addr)
 165          {
 166   1              unsigned char retb;
 167   1      
 168   1              RTC_start0();                                                                           //send start bit
 169   1              RTC_write_byte0(RTC_ADDR);                                      //send address byte
 170   1              RTC_write_byte0(reg_addr);                              //send high address
 171   1        
 172   1              RTC_restart0();
 173   1              RTC_write_byte0(RTC_ADDR+1);                                    //send address byte
 174   1              retb = RTC_read_byte0();                        //get high data
 175   1              RTC_stop0();                                            //stop    
 176   1          
 177   1              return retb;
 178   1      }
 179          /***************************************************/
C51 COMPILER V9.02   RTC3130                                                               10/24/2014 13:34:53 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    291    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----       3
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
