C51 COMPILER V9.02   DAC6571_MV                                                            07/30/2015 20:58:17 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE DAC6571_MV
OBJECT MODULE PLACED IN DAC6571_mV.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DAC6571_mV.C OMF2 BROWSE DEBUG

line level    source

   1          /***********************************************
   2            PRODUCT FOR NEWCAL MIX_TEMP FUNCTION
   3             CPU : MPC82G516
   4             BEGIN DATE: 2013.11.01
   5             FINISHED  : 2014.01.25
   6             WRITEBY   :JOHNSON LIN
   7             DAC6571mV  setup   SET 1001 0000 FOR A0 TYPE 
   8              8CH =  pga =1 ,32767BITS    0x98 0x10 dd dd
   9          **************************************************/
  10          #include <MG82FE564.H>
  11          #include <DAC6571_mV.h>
  12          #include <IO_DEFINE.h>
  13          #define   ADDR_CODE 0x98    //   0x98 for 8571
  14          
  15          unsigned char  _mV_ack;      // bit array of error types
  16          unsigned char Value_Hi,Value_Lo;
  17          extern unsigned char  NP_COD;
  18          extern void delay(unsigned int i);
  19          extern idata unsigned char Soft_Timer[8];
  20          
  21          /*******************************************************************/
  22          void _mVBitDly(void)               // wait 4.7uS, or thereabouts
  23          {                                   // tune to xtal. This works at 11.0592MHz
  24   1              unsigned char   i;
  25   1              
  26   1              for (i=0; i<0x12; i++);
  27   1      }
  28          /*****************************************************/
  29          void DAC6571mV_Init(void)
  30          {
  31   1              unsigned int i;
  32   1              mV_SCL = 1 ;
  33   1              _mVBitDly();
  34   1              mV_SDA = 1 ;
  35   1              _mVBitDly();
  36   1              _mVBitDly();
  37   1              _mVBitDly();
  38   1              _mVBitDly();
  39   1              mV_SDA = 0;
  40   1      
  41   1              for(i = 0; i < 0x100; i++);    
  42   1      }
  43          /*********************************************************************/
  44          void DAC6571mV_start(void)
  45          {
  46   1              mV_SDA = 1 ;
  47   1              _mVBitDly();
  48   1              mV_SCL = 1 ;
  49   1              _mVBitDly();
  50   1         mV_SDA = 0 ;
  51   1         _mVBitDly();
  52   1         mV_SCL = 0 ;
  53   1      }
  54          /*************************************/
  55          void DAC6571mV_stop(void)
C51 COMPILER V9.02   DAC6571_MV                                                            07/30/2015 20:58:17 PAGE 2   

  56          {
  57   1              mV_SCL = 1 ;
  58   1              _mVBitDly();
  59   1          mV_SDA = 1 ;
  60   1              _mVBitDly();
  61   1      }
  62          /********************************************/
  63          void DAC6571mV_write_byte(unsigned char bt)
  64          {
  65   1              idata unsigned char i;
  66   1      
  67   1              _mV_ack = TRUE;                                         //default have ack
  68   1        
  69   1              for (i=0; i<8; i++)
  70   1              {
  71   2                      if (bt & 0x80)
  72   2                         {mV_SDA = 1;}                      // send each bit, MSB first
  73   2                      else
  74   2                         {mV_SDA = 0;}
  75   2                      mV_SCL = 1;
  76   2                      _mVBitDly();
  77   2                      mV_SCL = 0;
  78   2                      _mVBitDly();
  79   2                      bt = bt << 1;
  80   2              }
  81   1      
  82   1              mV_SDA = 1;                       // change input and listen for ACK
  83   1              mV_SCL = 1;
  84   1              _mVBitDly();
  85   1              if (mV_SDA)
  86   1                {_mV_ack = FALSE;}                            // ack didn't happen, may be nothing out there
  87   1              mV_SCL = 0;
  88   1              _mVBitDly();
  89   1      }
  90          /********************************************************/
  91          void Set_mV(unsigned int mV_V)
  92          {
  93   1          unsigned char HI_CODE;
  94   1          unsigned char LO_CODE; 
  95   1      
  96   1               HI_CODE =0 ;  LO_CODE = 0;             //   0000   aaaa bbbb ccxx 
  97   1      
  98   1                      if(NP_COD == 0)
  99   1                       LO_CODE = mV_V ;                       
 100   1                       HI_CODE = mV_V >> 8;
 101   1      //               HI_CODE &= HI_CODE & 0x0f;
 102   1      
 103   1               DAC6571mV_start();                                                             //send start bit
 104   1               DAC6571mV_write_byte(0x98);
 105   1               DAC6571mV_write_byte(0x10);               //send hi address
 106   1               DAC6571mV_write_byte(HI_CODE);               //send lo address
 107   1               DAC6571mV_write_byte(LO_CODE); 
 108   1               DAC6571mV_stop();                              //stop
 109   1      }
 110          /************************************/                                                                                           
 111          void mV_Delay(unsigned int n)
 112          {
 113   1              while(n--);
 114   1      }
 115          /****************************************/


C51 COMPILER V9.02   DAC6571_MV                                                            07/30/2015 20:58:17 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    184    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----       1
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
